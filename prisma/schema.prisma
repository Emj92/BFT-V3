generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String               @id @default(cuid())
  email                   String               @unique
  name                    String?
  password                String
  role                    Role                 @default(USER)
  createdAt               DateTime             @default(now())
  updatedAt               DateTime             @updatedAt
  organizationId          String?
  avatarUrl               String?
  bundle                  BundleType
  bundlePurchasedAt       DateTime?
  city                    String?
  country                 String?
  credits                 Int                  @default(5)
  firstName               String?
  houseNumber             String?
  lastName                String?
  phone                   String?
  street                  String?
  emailTokenExpiry        DateTime?
  emailVerificationToken  String?
  emailVerified           Boolean              @default(false)
  isTeamOwner             Boolean              @default(false)
  resetToken              String?
  resetTokenExpiry        DateTime?
  teamId                  String?
  bundleExpiresAt         DateTime?
  bfeGenerations          BfeGeneration[]
  transactions            CreditTransaction[]
  globalNotifications     GlobalNotification[]
  notificationsRead       NotificationRead[]
  projects                Project[]
  reports                 Report[]
  scans                   Scan[]
  supportTickets          SupportTicket[]
  teamChatMessages        TeamChatMessage[]
  receivedTeamInvitations TeamInvitation[]     @relation("InvitationReceiver")
  sentTeamInvitations     TeamInvitation[]     @relation("InvitationSender")
  ticketMessages          TicketMessage[]
  organization            Organization?        @relation(fields: [organizationId], references: [id])
  team                    Team?                @relation(fields: [teamId], references: [id])
  wcagSessions            WcagSession[]
}

model Organization {
  id          String    @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  projects    Project[]
  users       User[]
}

model Project {
  id             String        @id @default(cuid())
  name           String
  description    String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  organizationId String?
  ownerId        String
  organization   Organization? @relation(fields: [organizationId], references: [id])
  owner          User          @relation(fields: [ownerId], references: [id])
  websites       Website[]
}

model Website {
  id        String   @id @default(cuid())
  name      String
  baseUrl   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  projectId String
  pages     Page[]
  project   Project  @relation(fields: [projectId], references: [id])
}

model Page {
  id        String   @id @default(cuid())
  url       String
  title     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  websiteId String
  website   Website  @relation(fields: [websiteId], references: [id])
  scans     Scan[]
}

model Scan {
  id          String         @id @default(cuid())
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  startedAt   DateTime?
  completedAt DateTime?
  status      ScanStatus     @default(PENDING)
  results     Json?
  score       Float?
  violations  Int?
  warnings    Int?
  passes      Int?
  incomplete  Int?
  userId      String
  pageId      String
  issues      Issue[]
  page        Page           @relation(fields: [pageId], references: [id])
  user        User           @relation(fields: [userId], references: [id])
  standards   ScanStandard[]
}

model Standard {
  id          String         @id @default(cuid())
  name        String         @unique
  description String?
  version     String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  rules       Rule[]
  scans       ScanStandard[]
}

model ScanStandard {
  scanId     String
  standardId String
  createdAt  DateTime @default(now())
  scan       Scan     @relation(fields: [scanId], references: [id])
  standard   Standard @relation(fields: [standardId], references: [id])

  @@id([scanId, standardId])
}

model Rule {
  id          String   @id @default(cuid())
  code        String
  name        String
  description String?
  impact      String?
  standardId  String
  issues      Issue[]
  standard    Standard @relation(fields: [standardId], references: [id])

  @@unique([standardId, code])
}

model Issue {
  id        String      @id @default(cuid())
  type      IssueType
  selector  String?
  html      String?
  message   String
  impact    Float?
  scanId    String
  ruleId    String
  status    IssueStatus @default(OPEN)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  rule      Rule        @relation(fields: [ruleId], references: [id])
  scan      Scan        @relation(fields: [scanId], references: [id])
}

model CreditTransaction {
  id          String   @id @default(cuid())
  userId      String
  amount      Int
  description String?
  createdAt   DateTime @default(now())
  type        String?  @default("CREDIT_PURCHASE")
  user        User     @relation(fields: [userId], references: [id])
}

model Report {
  id        String     @id @default(cuid())
  userId    String
  title     String
  content   Json
  type      ReportType
  scanId    String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id])
}

model Notification {
  id        String             @id @default(cuid())
  title     String
  message   String
  type      NotificationType   @default(INFO)
  isGlobal  Boolean            @default(true)
  createdBy String?
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  readBy    NotificationRead[]
}

model NotificationRead {
  id             String       @id @default(cuid())
  userId         String
  notificationId String
  readAt         DateTime     @default(now())
  notification   Notification @relation(fields: [notificationId], references: [id])
  user           User         @relation(fields: [userId], references: [id])

  @@unique([userId, notificationId])
}

model SupportTicket {
  id           String          @id @default(cuid())
  subject      String
  description  String
  priority     TicketPriority  @default(MEDIUM)
  status       TicketStatus    @default(OPEN)
  category     TicketCategory  @default(OTHER)
  userId       String
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  ticketNumber String?
  user         User            @relation(fields: [userId], references: [id])
  messages     TicketMessage[]
}

model TicketMessage {
  id        String        @id @default(cuid())
  content   String
  ticketId  String
  userId    String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  ticket    SupportTicket @relation(fields: [ticketId], references: [id])
  user      User          @relation(fields: [userId], references: [id])
}

model WcagSession {
  id                String   @id @default(cuid())
  userId            String
  userMessage       String
  assistantResponse String
  sessionsUsed      Int      @default(1)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id])
}

model GlobalNotification {
  id              String   @id @default(cuid())
  message         String
  link            String?
  linkText        String?
  backgroundColor String   @default("#3b82f6")
  textColor       String   @default("#ffffff")
  targetPackages  String[]
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  createdBy       String
  dismissible     Boolean  @default(true)
  specificUsers   String[]
  createdByUser   User     @relation(fields: [createdBy], references: [id])
}

model BfeGeneration {
  id         String   @id @default(cuid())
  userId     String
  websiteUrl String
  content    Json
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
}

model Team {
  id             String            @id @default(cuid())
  name           String
  description    String?
  maxMembers     Int               @default(3)
  currentMembers Int               @default(1)
  sharedCredits  Int               @default(0)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  chatMessages   TeamChatMessage[]
  invitations    TeamInvitation[]
  members        User[]
}

model TeamInvitation {
  id         String           @id @default(cuid())
  email      String
  message    String?
  status     InvitationStatus @default(PENDING)
  teamId     String
  senderId   String
  receiverId String?
  expiresAt  DateTime
  acceptedAt DateTime?
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  receiver   User?            @relation("InvitationReceiver", fields: [receiverId], references: [id])
  sender     User             @relation("InvitationSender", fields: [senderId], references: [id])
  team       Team             @relation(fields: [teamId], references: [id])
}

model TeamChatMessage {
  id        String   @id @default(cuid())
  message   String
  senderId  String
  teamId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sender    User     @relation(fields: [senderId], references: [id])
  team      Team     @relation(fields: [teamId], references: [id])
}

enum Role {
  USER
  ADMIN
  AUDITOR
}

enum BundleType {
  STARTER
  PRO
  ENTERPRISE
  FREE
}

enum ScanStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
}

enum IssueType {
  VIOLATION
  WARNING
  PASS
  INCOMPLETE
}

enum IssueStatus {
  OPEN
  FIXED
  IGNORED
  FALSE_POSITIVE
}

enum InvoiceStatus {
  PENDING
  PAID
  FAILED
  CANCELLED
}

enum ReportType {
  ACCESSIBILITY_DECLARATION
  SCAN_REPORT
  WCAG_ANALYSIS
}

enum NotificationType {
  INFO
  WARNING
  SUCCESS
  ERROR
  UPDATE
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum TicketCategory {
  TECHNICAL
  CONSULTATION
  BILLING
  OTHER
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
  CANCELLED
}
